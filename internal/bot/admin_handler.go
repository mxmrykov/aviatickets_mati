package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"

	"aviatickets_mati/internal/entity"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
func (b *AviaTicketsBot) handleAdminCommand(ctx context.Context, msg *tgbotapi.Message) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) == 0 {
		b.sendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"+
			"/admin <–∫–ª—é—á> - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"+
			"/admin create_flight <–¥–∞–Ω–Ω—ã–µ> - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–π—Å\n"+
			"/admin delete_flight <ID> - —É–¥–∞–ª–∏—Ç—å —Ä–µ–π—Å\n"+
			"/admin flight_stats <ID> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Å—É")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
	if args[0] != b.adminKey {
		b.sendMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥–º–∏–Ω-–∫–ª—é—á")
		return
	}

	if len(args) < 2 {
		b.sendMessage(msg.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"+
			"create_flight\n"+
			"delete_flight\n"+
			"flight_stats")
		return
	}

	switch args[1] {
	case "create_flight":
		b.handleCreateFlight(ctx, msg, args[2:])
	case "delete_flight":
		b.handleDeleteFlight(ctx, msg, args[2:])
	case "flight_stats":
		b.handleFlightStats(ctx, msg, args[2:])
	default:
		b.sendMessage(msg.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞")
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–π—Å–∞
func (b *AviaTicketsBot) handleCreateFlight(ctx context.Context, msg *tgbotapi.Message, args []string) {
	if len(args) < 7 {
		b.sendMessage(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /admin <–∫–ª—é—á> create_flight "+
			"<–Ω–æ–º–µ—Ä> <–æ—Ç–∫—É–¥–∞> <–∫—É–¥–∞> <–≤—ã–ª–µ—Ç(2006-01-02T15:04)> <–ø—Ä–∏–ª–µ—Ç> <—Ü–µ–Ω–∞> <–º–µ—Å—Ç–∞>")
		return
	}

	flightNumber := args[0]
	departure := args[1]
	arrival := args[2]

	departureTime, err := time.Parse(time.RFC3339, args[3])
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RFC3339 (2006-01-02T15:04:00Z)")
		return
	}

	arrivalTime, err := time.Parse(time.RFC3339, args[4])
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—Ä–∏–ª–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RFC3339 (2006-01-02T15:04:00Z)")
		return
	}

	price, err := strconv.ParseFloat(args[5], 64)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã")
		return
	}

	seats, err := strconv.Atoi(args[6])
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç")
		return
	}

	flight := entity.Flight{
		FlightNumber:     flightNumber,
		DepartureAirport: departure,
		ArrivalAirport:   arrival,
		DepartureTime:    departureTime,
		ArrivalTime:      arrivalTime,
		Price:            price,
		AvailableSeats:   seats,
	}

	if err := b.flightUC.CreateFlight(ctx, flight); err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–∞: "+err.Error())
		return
	}

	b.sendMessage(msg.Chat.ID, "–†–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞
func (b *AviaTicketsBot) handleDeleteFlight(ctx context.Context, msg *tgbotapi.Message, args []string) {
	if len(args) < 1 {
		b.sendMessage(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /admin <–∫–ª—é—á> delete_flight <–Ω–æ–º–µ—Ä_—Ä–µ–π—Å–∞>")
		return
	}

	flightNumber := args[0]

	// –ù–∞—Ö–æ–¥–∏–º —Ä–µ–π—Å –ø–æ –Ω–æ–º–µ—Ä—É
	flight, err := b.flightUC.GetFlightByNumber(ctx, flightNumber)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	if err := b.flightUC.DeleteFlight(ctx, flight.ID); err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞: "+err.Error())
		return
	}

	b.sendMessage(msg.Chat.ID, fmt.Sprintf("–†–µ–π—Å %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", flightNumber))
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Å—É
func (b *AviaTicketsBot) handleFlightStats(ctx context.Context, msg *tgbotapi.Message, args []string) {
	if len(args) < 1 {
		b.sendMessage(msg.Chat.ID, "–§–æ—Ä–º–∞—Ç: /admin <–∫–ª—é—á> flight_stats <–Ω–æ–º–µ—Ä_—Ä–µ–π—Å–∞>")
		return
	}

	flightNumber := args[0]

	// –ù–∞—Ö–æ–¥–∏–º —Ä–µ–π—Å –ø–æ –Ω–æ–º–µ—Ä—É
	flight, err := b.flightUC.GetFlightByNumber(ctx, flightNumber)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	stats, err := b.flightUC.GetFlightStats(ctx, flight.ID)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: "+err.Error())
		return
	}

	response := fmt.Sprintf(
		"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Å—É %s\n\n"+
			"–í—Å–µ–≥–æ –º–µ—Å—Ç: %d\n"+
			"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: %d\n"+
			"–°–≤–æ–±–æ–¥–Ω–æ: %d\n"+
			"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏: %.2f%%",
		flightNumber,
		stats.TotalSeats,
		stats.BookedSeats,
		stats.AvailableSeats,
		stats.LoadFactor*100,
	)

	b.sendMessage(msg.Chat.ID, response)
}
