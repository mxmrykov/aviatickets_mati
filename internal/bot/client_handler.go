package bot

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"aviatickets_mati/internal/entity"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *AviaTicketsBot) handleStart(chatID int64, user *entity.User) {
	msg := tgbotapi.NewMessage(chatID,
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!\n\n"+
			"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/search - –ü–æ–∏—Å–∫ —Ä–µ–π—Å–æ–≤\n"+
			"/book - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç\n"+
			"/mybookings - –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"+
			"/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")

	b.bot.Send(msg)
}

func (b *AviaTicketsBot) handleSearchCommand(ctx context.Context, msg *tgbotapi.Message) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) < 2 {
		b.sendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–æ—Ç–∫—É–¥–∞> <–∫—É–¥–∞>")
		return
	}

	origin := args[0]
	destination := args[1]

	flights, err := b.flightUC.SearchFlights(ctx, origin, destination)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–π—Å–æ–≤")
		return
	}

	if len(flights) == 0 {
		b.sendMessage(msg.Chat.ID, "–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	var response strings.Builder
	response.WriteString("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–π—Å—ã:\n\n")
	for _, flight := range flights {
		response.WriteString(
			fmt.Sprintf("‚úàÔ∏è –†–µ–π—Å %s\nüõ´ %s -> %s\n‚è± %s - %s\nüíµ –¶–µ–Ω–∞: %.2f ‚ÇΩ\nü™ë –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: %d\n\n",
				flight.FlightNumber,
				flight.DepartureAirport,
				flight.ArrivalAirport,
				flight.DepartureTime.Format("02.01.2006 15:04"),
				flight.ArrivalTime.Format("02.01.2006 15:04"),
				flight.Price,
				flight.AvailableSeats,
			))
	}

	b.sendMessage(msg.Chat.ID, response.String())
}

func (b *AviaTicketsBot) handleBookCommand(ctx context.Context, msg *tgbotapi.Message, userID int) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) < 3 {
		b.sendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /book <–Ω–æ–º–µ—Ä_—Ä–µ–π—Å–∞> <–∏–º—è_–ø–∞—Å—Å–∞–∂–∏—Ä–∞> <–Ω–æ–º–µ—Ä_–º–µ—Å—Ç–∞>")
		return
	}

	flightNumber := args[0]
	passengerName := strings.Join(args[1:len(args)-1], " ")
	seatNumber := args[len(args)-1]

	// –ù–∞—Ö–æ–¥–∏–º —Ä–µ–π—Å –ø–æ –Ω–æ–º–µ—Ä—É
	flight, err := b.flightUC.GetFlightByNumber(ctx, flightNumber)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
	booking := entity.Booking{
		UserID:        userID,
		FlightID:      flight.ID,
		PassengerName: passengerName,
		SeatNumber:    seatNumber,
		BookingStatus: "confirmed",
	}

	if err := b.bookingUC.CreateBooking(ctx, booking); err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: "+err.Error())
		return
	}

	response := fmt.Sprintf(
		"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"+
			"–ü–∞—Å—Å–∞–∂–∏—Ä: %s\n"+
			"–†–µ–π—Å: %s\n"+
			"–ú–µ—Å—Ç–æ: %s\n"+
			"–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞: %s",
		passengerName,
		flight.FlightNumber,
		seatNumber,
		flight.DepartureTime.Format("02.01.2006 15:04"),
	)

	b.sendMessage(msg.Chat.ID, response)
}

func (b *AviaTicketsBot) handleMyBookingsCommand(ctx context.Context, msg *tgbotapi.Message, userID int) {
	bookings, err := b.bookingUC.GetUserBookings(ctx, userID)

	if err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
		return
	}

	if len(bookings) == 0 {
		b.sendMessage(msg.Chat.ID, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
		return
	}

	var response strings.Builder
	response.WriteString("–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n")

	for _, booking := range bookings {
		response.WriteString(
			fmt.Sprintf("üìå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #%d\n\n"+
				"–ú–∞—Ä—à—Ä—É—Ç: %s - %s\n\n"+
				"–ü–∞—Å—Å–∞–∂–∏—Ä: %s\n"+
				"–†–µ–π—Å: %s\n"+
				"–ú–µ—Å—Ç–æ: %s\n\n"+
				"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞: %s\n"+
				"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–∞–¥–∫–∏: %s\n\n"+
				"–°—Ç–∞—Ç—É—Å: %s\n",
				booking.ID,
				booking.Flight.DepartureAirport,
				booking.Flight.ArrivalAirport,
				booking.PassengerName,
				booking.Flight.FlightNumber,
				booking.SeatNumber,
				booking.Flight.DepartureTime,
				booking.Flight.ArrivalTime,
				booking.BookingStatus,
			))
	}

	b.sendMessage(msg.Chat.ID, response.String())
}

func (b *AviaTicketsBot) handleCancelCommand(ctx context.Context, msg *tgbotapi.Message, userID int) {
	args := strings.Fields(msg.CommandArguments())
	if len(args) < 1 {
		b.sendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è>")
		return
	}

	bookingID, err := strconv.Atoi(args[0])
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	booking, err := b.bookingUC.GetBookingByID(ctx, bookingID)
	if err != nil {
		b.sendMessage(msg.Chat.ID, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		return
	}

	if booking.UserID != userID {
		b.sendMessage(msg.Chat.ID, "–≠—Ç–æ –Ω–µ –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
		return
	}

	if err := b.bookingUC.CancelBooking(ctx, bookingID); err != nil {
		b.sendMessage(msg.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
		return
	}

	b.sendMessage(msg.Chat.ID, "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
}
